(def constant TT_SCORETIMER_INSTALLED true) #for modconfig
(def constant ST2_ELEMENT_NAME "'scoreTimer2'")
(def constant ST2_DEFAULT_OFFSET {
	X: 4,
	Y: 120
})
(def constant ST2_SIZE {
	WIDTH	: 84px,
	HEIGHT	: 34px
})

#must be identical to PyConst
(def constant ST2_RESULT_PREDICTION {
	DRAW_TIME	: 1,
	WIN_TIME	: 2,
	WIN_SCORE	: 3,
	LOSE_TIME	: 4,
	LOSE_SCORE	: 5,

	ALLY_WINNING: [2, 3],
	ENEMY_WINNING: [4, 5]
})

(def constant ST2_DISPLAY_MODES {
	DISABLE : 0,
	ENABLE  : 1,
	ADAPTIVE: 2,
})


(def element ScoreTimer2() layout=true
	(scope
	)
	(block
		#(macro trace "'mainscnere is here'")
		(element ScoreTimer2TeamInfoItem isAlly="true")
		(element ScoreTimer2TeamInfoItem isAlly="false")
	)
)

(def element ScoreTimer2TeamInfoItem(isAlly:bool) layout=true
	(scope
		(event evInBattleChanged)

		#battledata
		(var timeToWinItemName:str = "isAlly ? 'allyTimeToWin' : 'enemyTimeToWin'")
		(var winningStates:array = "isAlly ? ST2_RESULT_PREDICTION.ALLY_WINNING : ST2_RESULT_PREDICTION.ENEMY_WINNING")
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var dataComponent:gfx = "battleDataEntity && battleDataEntity.hasComponent(CC.data) ? battleDataEntity.data : null" (event "battleDataEntity.evAdded"))
		(var scoreTimerData:dict = "dataComponent ? dataComponent.data : {}" (event "dataComponent.evChanged"))
		(var resultPrediction:number = "'resultPrediction' in scoreTimerData ? scoreTimerData.resultPrediction : -1")
		(var isHighPrecision:bool = "'highPrecision' in scoreTimerData ? scoreTimerData.highPrecision : false")
		(var winTime:number = "timeToWinItemName in scoreTimerData ? scoreTimerData[timeToWinItemName] : -1")
		(var isWinning:bool = "isIn(resultPrediction, winningStates)")

		(var animatedWinTime:number = "winTime" watch=false)
		(controller $Animation
			(bindcall play 
				to       = "{animatedWinTime:  winTime}"
				duration = "0.6"
				action	 = "killAll"
				easing	 = "Easing.cubic_out"
			)
		)

		#drag-drop
		(macro STAGE_SIZE)
		(var teamType:str = "isAlly ? 'Ally' : 'Enemy'")
		(var itemName:str = "ST2_ELEMENT_NAME + teamType")
		(var defaultPos:dict = "{'positionX': isAlly ? (stageWidth/2 - ST2_SIZE.WIDTH - ST2_DEFAULT_OFFSET.X) : (stageWidth/2 + ST2_DEFAULT_OFFSET.X), 'positionY': ST2_DEFAULT_OFFSET.Y}")
		(macro DRAGGABLE_GET_DROP_POSITION _elementName="itemName" _defaultPosition="defaultPos")

		#pref
		(var cameraComponent:gfx = "$datahub.getSingleComponent(CC.camera)")
	    (var altVision:bool = "cameraComponent ? cameraComponent.altVision : false" (event "cameraComponent.evAltVisionChanged"))

		(macro TT_GET_USERPREF)
		(macro TT_GET_PREF_BOOL		_varName="'isPositionLocked'"		_pref="ST2_PREFS.DISABLE_DRAGDROP")
		(macro TT_GET_PREF_NUMBER	_varName="'bgDisplayMode'"			_pref="ST2_PREFS.BACKGROUND.DISPLAY_MODE")
		(macro TT_GET_PREF_NUMBER	_varName="'bgAlpha'"				_pref="ST2_PREFS.BACKGROUND.ALPHA")
		(var isBackgroundVisible:bool = "bgDisplayMode == ST2_DISPLAY_MODES.ADAPTIVE ? altVision : bgDisplayMode")

		(var battleState:number = "battleDataEntity.battleState.battleState" (event "battleDataEntity.battleState.evBattleStateChanged"))
        (var isInBattle:bool = "battleState == SC.Common.CLIENT_BATTLE_STATE.STARTED")
	)

	(block
		(controller $Instance renderer='ModDraggableElement'
			(bind enabled "!isPositionLocked")
			(args
				_elementName="itemName"
				_defaultPosition="defaultPos"
			)
		)
		(style
			(position = "absolute")
			(bind left "dragPosX")
			(bind top "dragPosY")
			(width = "ST2_SIZE.WIDTH")
			(height = "ST2_SIZE.HEIGHT")
			(alpha = 0)
		)

		(dispatch evInBattleChanged args="{}" on=addedToStage (bind enabled "isInBattle")(bind trigger "isInBattle"))
		(controller $Animation
			(bindcall play 
				from     = "{visualOffsetY: -10, alpha: 0}"
				to       = "{visualOffsetY:   0, alpha: 1}"
				reverse	 = "!isInBattle"
				duration = "0.3"
				(event "evInBattleChanged")
			)
		)

		#background
		(mc contrast_panel
			(bind visible "isBackgroundVisible")
			(class $FullsizeAbsolute)
			(style
				(bind alpha "bgAlpha")
				(hitTest = false)
			)
		)
		#info
		(hblock
			(class $Fullsize)
			(style
				(align = "middle|center")
				(hitTest = false)
				(bind flow "isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
			)
			(element ScoreTimer2StatusIconItem _isAlly="isAlly" _isWinning="isWinning" _winTime="animatedWinTime")
			(element ScoreTimer2TimerItem _isAlly="isAlly" _isWinning="isWinning" _winTime="animatedWinTime" _isHighPrecision="isHighPrecision")
		)
	)
)

(def element ScoreTimer2StatusIconItem(_isAlly:bool, _isWinning:bool) layout=true
	(scope
		(var color:number = "_isAlly	? SC.Ui_styles.SERVICE_COLORS.GREEN
										: SC.Ui_styles.SERVICE_COLORS.DARK_RED")

		(event evIsWinningChanged)
	)

	(dispatch evIsWinningChanged init=false (bind enabled "_isWinning") (bind trigger "_isWinning"))

	(style
		(width = 20)
		(height = 20)
		(pivotX = 50%)
		(pivotY = 50%)
	)
	(element ScoreTimer2DiamondItem _color="color" _isFill="_isWinning")
	(controller $Animation
		(bindcall play  duration="0.3"
						easing="Easing.cubic_out"
						from="{ visualScaleX: 1.0, visualScaleY: 1.0 }"
						to=	 "{ visualScaleX: 4.0, visualScaleY: 4.0 }"
						(event "evIsWinningChanged")
		)
		(bindcall play  duration="0.15"
						delay="0.3"
						easing="Easing.cubic_out"
						from="{ visualScaleX: 4.0, visualScaleY: 4.0 }"
						to=	 "{ visualScaleX: 1.0, visualScaleY: 1.0 }"
						(event "evIsWinningChanged")
		)
	)
)

(def element ScoreTimer2DiamondItem(_color:number, _isFill:bool)
	(scope
		(var size:number = "10")
	)
	(class $MiddleVHAbsolutely)
	(style
		(bind width "size")
		(bind height "size")
		(rotation = 45)
		(pivotX = 50%)
		(pivotY = 50%)
	)
	(block
		(.graphics
			(lineStyle 1 "_color" 1)
			(drawRect 0 0 "size" "size")
			(endFill)
		)
	)
	(block
		(bind visible "_isFill")
		(.graphics
			(lineStyle 1 "_color" 1)
			(beginFill "_color" 1)
			(drawRect 0 0 "size" "size")
			(endFill)
		)
	)
)

(def element ScoreTimer2TimerItem(_isAlly:bool, _isWinning:bool, _winTime:number, _isHighPrecision:bool) layout=true
	(scope
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var currentTime:number = "timer.currentTime" (event "timer.evInfrequent"))
		(var winTime:number = "_isHighPrecision ? _winTime - currentTime : _winTime")
		(var timerColor:number = "	_isWinning	?
										_isAlly	? SC.Ui_styles.SERVICE_COLORS.GREEN
												: SC.Ui_styles.SERVICE_COLORS.DARK_RED
									: SC.Ui_styles.SERVICE_COLORS.WHITE")
		(var isWinTimeValid:bool = "(winTime != null) && (0 <= winTime) && (winTime < 6000)")
		(var winTimeText:str = "isWinTimeValid ? countdownFormat(winTime, 0, true) : '--:--'")
		(var marginSize:number = "isWinTimeValid ? 0px : 4px")
	)

	(style
		(width = 55)
		(height = 100%)
	)

	(tf
		(class $TextDefaultBold)
		(style
			(bind textAlign "_isAlly ? left : right")
			(bind textColor "timerColor")
			(fontSize = "21")
			(bind marginTop "isWinTimeValid ? 1px : -1px")
			(bind paddingLeft "_isAlly ? marginSize : 0px")
			(bind paddingRight "!_isAlly ? marginSize : 0px")
			(width = 100%)
		)
		(bind text "winTimeText")
	)
)